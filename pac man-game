<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pacman-Spiel</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #052d26;
        }

        canvas {
            border: 2px solid #fff;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const pacman = {
            x: 200,
            y: 200,
            radius: 10,
            mouthOpen: false,
            direction: 'right'
        };

        const points = [
            { x: 50, y: 50 },
            { x: 150, y: 150 },
            { x: 250, y: 250 },
            { x: 350, y: 350 }
        ];

        const ghosts = [
            { x: 100, y: 100, color: '#FF0000', dx: 2, dy: 2 },
            { x: 300, y: 300, color: '#00FF00', dx: -2, dy: -2 }
        ];

        function drawPacman() {
            ctx.beginPath();
            if (pacman.mouthOpen) {
                ctx.arc(pacman.x, pacman.y, pacman.radius, 0.2 * Math.PI, 1.8 * Math.PI);
            } else {
                ctx.arc(pacman.x, pacman.y, pacman.radius, 0, 2 * Math.PI);
            }
            ctx.lineTo(pacman.x, pacman.y);
            ctx.closePath();
            ctx.fillStyle = '#FFFF00';
            ctx.fill();
        }

        function drawPoints() {
            ctx.fillStyle = '#FFFFFF';
            points.forEach(point => {
                ctx.beginPath();
                ctx.arc(point.x, point.y, 3, 0, 2 * Math.PI);
                ctx.fill();
            });
        }

        function drawGhosts() {
            ghosts.forEach(ghost => {
                ctx.beginPath();
                ctx.arc(ghost.x, ghost.y, pacman.radius, 0, 2 * Math.PI);
                ctx.fillStyle = ghost.color;
                ctx.fill();
            });
        }

        function clearCanvas() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }

        function update() {
            clearCanvas();
            drawPacman();
            drawPoints();
            drawGhosts();
            requestAnimationFrame(update);
        }

        function movePacman() {
            switch (pacman.direction) {
                case 'up':
                    pacman.y -= 2;
                    break;
                case 'down':
                    pacman.y += 2;
                    break;
                case 'left':
                    pacman.x -= 2;
                    break;
                case 'right':
                    pacman.x += 2;
                    break;
            }
            checkCollisions();
        }

        function checkCollisions() {
          
            points.forEach((point, index) => {
                if (Math.abs(pacman.x - point.x) < pacman.radius && Math.abs(pacman.y - point.y) < pacman.radius) {
                    points.splice(index, 1);
                }
            });

            
            ghosts.forEach(ghost => {
                if (Math.abs(pacman.x - ghost.x) < pacman.radius && Math.abs(pacman.y - ghost.y) < pacman.radius) {
                    alert('Game Over! Du wurdest von einem Geist erwischt.');
                    resetGame();
                }
            });
        }

        function resetGame() {
            pacman.x = 200;
            pacman.y = 200;
            points.length = 0;
            points.push({ x: 50, y: 50 }, { x: 150, y: 150 }, { x: 250, y: 250 }, { x: 350, y: 350 });
        }

        document.addEventListener('keydown', function(event) {
            switch (event.key) {
                case 'ArrowUp':
                    pacman.direction = 'up';
                    break;
                case 'ArrowDown':
                    pacman.direction = 'down';
                    break;
                case 'ArrowLeft':
                    pacman.direction = 'left';
                    break;
                case 'ArrowRight':
                    pacman.direction = 'right';
                    break;
            }
        });

        setInterval(function() {
            pacman.mouthOpen = !pacman.mouthOpen;
        }, 200);

        setInterval(function() {
            movePacman();
            moveGhosts();
        }, 16);

        function moveGhosts() {
            ghosts.forEach(ghost => {
                ghost.x += ghost.dx;
                ghost.y += ghost.dy;

                if (ghost.x <= 0 || ghost.x >= canvas.width) {
                    ghost.dx = -ghost.dx;
                }
                if (ghost.y <= 0 || ghost.y >= canvas.height) {
                    ghost.dy = -ghost.dy;
                }
            });
        }

        update();
    </script>
</body>
</html>
